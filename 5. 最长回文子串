5. 最长回文子串
给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：
输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。

示例 2：
输入: "cbbd"
输出: "bb"

//动态规划算法
        /*
        因为O(n2),所以每一次判断s[i...j]是否是回文串必须只计算O(1)次,不可能每次都对子串调用判断回文函数.
        当循环运行到s[i...j]但无法判断时,需要从之前的循环中已经判断成功的结果中找信息,
        且知道s[i...j-1]无法O(1)次判断s[i...j],而是需要知道s[i+1...j-1]是回文就能O(1)次算出.
        长度为k的回文串是通过长度为k-2的回文串得出的
        */
class Solution {
public:
    string longestPalindrome(string s) {
        int n=s.size();
        string ans;
        if(!n) return ans;
        ans=s.substr(0,1); //先令ans为第一个字符，s[0]本身一定是回文串
        vector<vector<int>> dp(n,vector<int>(n)); //定义二维vector的方法
        int length,i,j;
        //先获得长度为1,2的回文串,s[i...j]是回文串时,dp[i][j]=1
        for(i=0;i<n-1;i++){
            dp[i][i]=1;
            if(s[i]==s[i+1]) {
                dp[i][i+1]=1;
                ans=s.substr(i,2);
            }
        }
        dp[n-1][n-1]=1;
        //接下来依次获得长度为3到n的回文串
        for(length=3;length<=n;length++){
            for(i=0;i<n-length+1;i++){
                if(dp[i+1][i+length-2]==1 && s[i]==s[i+length-1]) {
                    dp[i][i+length-1]=1;
                    if(length>ans.size()) ans=s.substr(i,length);
                }
            }
        }
        return ans;
    }
};
